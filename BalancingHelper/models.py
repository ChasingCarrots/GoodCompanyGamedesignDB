# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models
from Production.models import *



class SampleProduct(models.Model):
    Name = models.CharField(max_length=255)
    ProductFunction = models.ForeignKey(ProductFunction)
    Modules = models.ManyToManyField(Module)
    ProductType = models.ForeignKey(ProductType)
    AutoGenerated = models.BooleanField(default=False)

    class Meta:
        verbose_name = 'Sample Product'
        verbose_name_plural = 'Sample Products'
        ordering = ['id']

    def __unicode__(self):
        return self.Name

    def getFeatureValues(self):
        featureValues = {}
        for module in self.Modules.all():
            for feature in module.Features.all():
                if feature.ProductFeature.Name in featureValues:
                    featureValues[feature.ProductFeature.Name] += feature.FeatureValue
                else:
                    featureValues[feature.ProductFeature.Name] = feature.FeatureValue
        for req in self.ProductFunction.FeatureRequirements.all():
            if req.Feature.Name not in featureValues:
                featureValues[req.Feature.Name] = 0
        for feat in self.ProductFunction.OptionalFeatures.all():
            if feat.Feature.Name not in featureValues:
                featureValues[feat.Feature.Name] = 0
        return featureValues

    def getSortedFeatureValues(self):
        features = self.getFeatureValues()
        sorted = []
        list = features.keys()
        list.sort(key=sortProductFeatures)
        for key in list:
            sorted.append((key, features[key]))
        return sorted

    def getFullRating(self):
        value = 0.0
        value += self.getOptionalRating()
        value += self.getMandatoryRating()
        value += self.getDrawbackRating()
        return value / 3.0

    def getMandatoryRating(self):
        i = 0.0
        n = 0.0
        featureValues = self.getFeatureValues()
        for requirement in self.ProductFunction.FeatureRequirements.all():
            if requirement.Feature.Name in featureValues:
                i += 1
                n += requirement.getRatingValue(featureValues[requirement.Feature.Name])
        return 0.5 if i <= 0 else n / i


    def getOptionalRating(self):
        i = 0.0
        n = 0.0
        featureValues = self.getFeatureValues()
        for feature in self.ProductFunction.OptionalFeatures.all().filter(IsNegative=False):
            if feature.Feature.Name in featureValues:
                i += 1
                n += feature.getRatingValue(featureValues[feature.Feature.Name])
        return 0.5 if i <= 0 else n / i

    def getDrawbackRating(self):
        i = 0.0
        n = 0.0
        featureValues = self.getFeatureValues()
        for feature in self.ProductFunction.OptionalFeatures.all().filter(IsNegative=True):
            if feature.Feature.Name in featureValues:
                i += 1
                n += feature.getRatingValue(featureValues[feature.Feature.Name])
        return 0.5 if i <= 0 else -(n / i)+1

    def collectMaterials(self):
        localMaterials = {}
        for module in self.Modules.all():
            for inputMat in module.InputMaterials.all():
                moduleMatQuery = Module.objects.filter(Material=inputMat.Material)
                if moduleMatQuery.exists():
                    inputModMaterials = moduleMatQuery.all()[0].collectMaterials()
                    for inputModMaterialID, inputModMaterial in inputModMaterials.items():
                        inputModMaterial["amount"] *= inputMat.Amount
                        inputModMaterial["totalcost"] *= inputMat.Amount
                        if inputModMaterialID in localMaterials:
                            localMaterials[inputModMaterialID]["amount"] += inputModMaterial["amount"]
                            localMaterials[inputModMaterialID]["totalcost"] += inputModMaterial["totalcost"]
                        else:
                            localMaterials[inputModMaterialID] = inputModMaterial
                else:
                    inputModMaterialID = inputMat.Material.id
                    if inputModMaterialID in localMaterials:
                        localMaterials[inputModMaterialID]["amount"] += inputMat.Amount
                        localMaterials[inputModMaterialID]["totalcost"] += inputMat.Amount * inputMat.Material.getPricePerUnit()
                    else:
                        localMaterials[inputModMaterialID] = {
                            "name": inputMat.Material.Name,
                            "amount": inputMat.Amount,
                            "totalcost": inputMat.Amount * inputMat.Material.getPricePerUnit(),
                            "icon": inputMat.Material.IconAssetID
                        }
        return localMaterials


def sortProductFeatures(featureName):
    feature = ProductFeature.objects.all().filter(Name=featureName)[0]
    if feature is not None:
        if None in feature.MainFeature.all() and feature.ComplementaryFeature is not None:
            return feature.Type * 5 + 0
        elif None in feature.MainFeature.all():
            return feature.Type * 5 + 1
        else:
            return feature.Type * 5 + 2
    return 999
