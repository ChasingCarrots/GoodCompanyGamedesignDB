from Helpers.balancing.modules import *
from Tuning.models import TuningValue
from commandbase import CommandBase
from Production.models import *
from BalancingHelper.models import *
from ObjectTypes.models import *
from Research.models import *


# Function to generate just all
class GenerateAllProducts(CommandBase):
    def RunCommand(self, commandline):
        string = ""
        for function in ProductFunction.objects.all():
            SampleProduct.objects.all().filter(ProductFunction=function, AutoGenerated="True").delete()
            for productType in function.ViableProductTypes.all():
                string += generateProductByType(productType, function)+"<br><br>"
        return string


class GenerateProductByType(CommandBase):
    def RunCommand(self, commandline):
        string = ""
        if ProductType.objects.all().filter(Name=commandline):
            productType = ProductType.objects.all().filter(Name=commandline)[0]
            SampleProduct.objects.all().filter(ProductType=productType, AutoGenerated="True").delete()
            for function in ProductFunction.objects.all().filter(ViableProductTypes=productType):
                string += generateProductByType(productType, function)+"<br><br>"
        else:
            return "Product Type Not Found"
        return string


class GenerateProductByFunction(CommandBase):
    def RunCommand(self, commandline):
        string = ""
        if ProductFunction.objects.all().filter(Name=commandline):
            function = ProductFunction.objects.all().filter(Name=commandline)
            SampleProduct.objects.all().filter(ProductFunction=function, AutoGenerated="True").delete()
            for productType in function.all()[0].ViableProductTypes.all():
                string += generateProductByType(productType, function.all()[0])+"<br><br>"
        else:
            return "Function Not Found"
        return string

def generateProductByType(productType, function):
    string = "New Product <br>" + productType.Name + "_" + function.Name + "<br>"

    requirementList = []
    for requirement in function.FeatureRequirements.all():
        requirementList.append(requirement)

    moduleLists = {}
    for slot in productType.Slots.all():
        list = []
        for module in Module.objects.all().filter(FitsIntoSlot=slot):
            list.append(module)
        list.sort(key=sortPrice)
        moduleLists[slot] = list


    print("___ PRODUCT START ___ " + productType.Name + ":" + function.Name + " ___ ")

    moduleData =  generateMVP(moduleLists.copy(), requirementList)
    if moduleData is not None:
        addProductToDB(function, productType, moduleData, "MVP")
        string += "Success!"
    else:
        string += "Failed!"
    return string


def addProductToDB(function, productType, moduleData, nameIdentifier):
    sampleProduct = SampleProduct.objects.create(Name=function.Name+"_"+productType.Name+"_"+nameIdentifier, AutoGenerated=True, ProductFunction=function, ProductType=productType)
    moduleIDs = []
    for module in moduleData.values():
        if module is not None:
            moduleIDs.append(module.id)
    sampleProduct.Modules = moduleIDs
    sampleProduct.save()
    return True

def generateMVP(moduleLists, requirements):
    string = ""

    activeModules = {}
    for slot in moduleLists:
        activeModules[slot] = None

    usedRessources = {}
    features = {}

    change = True
    while not isValidProduct(requirements, usedRessources, features) and change:
        print("___ NEW LOOP ___")
        change = False
        string += "<br>New Loop:"
        for slot, moduleList in moduleLists.items():
            string += "<br>Slot - " + slot.Name + ": "
            if len(moduleList) > 0:
                if not slot.IsOptional and activeModules[slot] is None:
                    activeModules[slot] = updateValues(activeModules[slot], moduleList, 0, usedRessources, features)
                    string += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; required slot, add " + activeModules[slot].Name
                    change = True
                else:
                    moduleIndex = checkModuleByRequirements(activeModules[slot], moduleList, requirements)
                    if moduleIndex > -1:
                        activeModules[slot] = updateValues(activeModules[slot], moduleList, moduleIndex, usedRessources, features)
                        string += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fits requirements: " + str(moduleRequirementAmount(moduleList[moduleIndex], requirements)) +", add " + activeModules[slot].Name
                        change = True
                    else:
                        moduleIndex = checkModuleByFeatures(activeModules[slot], moduleList, requirements, usedRessources)
                        if moduleIndex > -1:
                            activeModules[slot] = updateValues(activeModules[slot], moduleList, moduleIndex, usedRessources, features)
                            string += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fits ressources: " + str(moduleFeatureAmount(moduleList[moduleIndex], usedRessources)) +", add " + activeModules[slot].Name
                            change = True
                        else:
                            string += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no change"

    if isValidProduct(requirements, usedRessources, features):
        print("___ PRODUCT END - SUCCESS ___")
        return activeModules
    else:
        print("___ PRODUCT END - FAILED ___")
        return None


def checkModuleByFeatures(activeModule, modulList, requirements, features):
    index = 0
    savedIndex = -1
    requirementCount = moduleRequirementAmount(activeModule, requirements)
    maxFeatures = 0 if activeModule is None else moduleFeatureAmount(activeModule, features)
    for module in modulList:
        featureAmount = moduleFeatureAmount(module, features)
        if requirementCount <= moduleRequirementAmount(module, requirements) and maxFeatures < featureAmount:
            maxFeatures = featureAmount
            savedIndex = index
        index += 1
    return savedIndex

def moduleFeatureAmount(module, features):
    count = 0
    if module is not None:
        for feature in module.Features.all():
            if feature.ProductFeature.Name in features:
                count += feature.FeatureValue if feature.FeatureValue <= features[feature.ProductFeature.Name] else features[feature.ProductFeature.Name]
    return count

def checkModuleByRequirements(activeModule, moduleList, requirements):
    index = 0
    maxCount = 0 if activeModule is None else moduleRequirementAmount(activeModule, requirements)
    for mod in moduleList:
        if maxCount < moduleRequirementAmount(mod, requirements):
            return index
        index += 1
    return -1

def moduleRequirementAmount(module, requirements):
    count = 0
    if module is not None:
        for req in requirements:
            for feature in module.Features.all():
                if feature.ProductFeature == req.Feature and req.FeatureValue <= feature.FeatureValue:
                    count += 1
    return count


def updateValues(oldModule, moduleList, moduleIndex, usedRessources, features):
    newModule = moduleList[moduleIndex]
    removeModuleValue(oldModule, usedRessources, features)
    addModuleValues(newModule, usedRessources, features)
    #for i in range(0, moduleIndex):
    #    moduleList.pop(0)
    return newModule


def removeModuleValue(oldMod, usedRessources, features):
    if oldMod is not None:
        for feature in oldMod.Features.all():
            features[feature.ProductFeature.Name] -= feature.FeatureValue
            if len(feature.ProductFeature.MainFeature.all()) > 0:
                usedRessources[feature.ProductFeature.MainFeature.all()[0].Name] -= feature.FeatureValue

def addModuleValues(newMod, usedRessources, features):
    if newMod is not None:
        for feature in newMod.Features.all():
            if feature.ProductFeature.Name in features:
                features[feature.ProductFeature.Name] += feature.FeatureValue
            else:
                features[feature.ProductFeature.Name] = feature.FeatureValue
            if len(feature.ProductFeature.MainFeature.all()) > 0:
                if feature.ProductFeature.Name in usedRessources:
                    usedRessources[feature.ProductFeature.MainFeature.all()[0].Name] += feature.FeatureValue
                else:
                    usedRessources[feature.ProductFeature.MainFeature.all()[0].Name] = feature.FeatureValue

def sortPrice(module):
    return module.BaseMarketPrice

def isValidProduct(requirements, usedRessources, features):
    for req in requirements:
        if req.Feature.Name not in features:
            print("No feature value for requirement: " + req.Feature.Name + " * " + str(req.FeatureValue))
            return False
        else:
            if req.FeatureValue > features[req.Feature.Name]:
                print("Value to low for requirement: " + req.Feature.Name + " * " + str(req.FeatureValue) + " of " + str(features[req.Feature.Name]))
                return False

    for key, value in usedRessources.items():
        if key not in features:
            print("No feature value for ressource: " + key + " * " + str(value))
            return False
        else:
            if value > features[key]:
                print("Value to low for ressource: " + key + " * " + str(value) + " of " + str(features[key]))
                return False
    return True